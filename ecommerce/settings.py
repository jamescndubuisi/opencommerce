"""
Django settings for ecommerce project.

Generated by 'django-admin startproject' using Django 2.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""
import environ
import os
import cloudinary
import django
import sentry_sdk
from sentry_sdk.integrations.django import DjangoIntegration

# Initialise environment variables
env = environ.Env()
environ.Env.read_env()


sentry_sdk.init(
    dsn=env('SENTRY'),
    integrations=[
        DjangoIntegration(),
    ],

    # Set traces_sample_rate to 1.0 to capture 100%
    # of transactions for performance monitoring.
    # We recommend adjusting this value in production.
    traces_sample_rate=1.0,

    # If you wish to associate users to errors (assuming you are using
    # django.contrib.auth) you may enable sending PII data.
    send_default_pii=True
)

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!


SECRET_KEY = env('SECRET_KEY')


# SECURITY WARNING: don't run with debug turned on in production!

DEBUG = False
CSRF_TRUSTED_ORIGINS = ['https://ecommerce.stardusts.org',"http://localhost", "http://127.0.0.1", f"http://{env('SERVER_IP')}"]

ALLOWED_HOSTS = ["ecommerce.stardusts.org", "localhost", "127.0.0.1", env('SERVER_IP')]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'cloudinary_storage',
    'cloudinary',
    "portal",
    "products",
    "crispy_forms",
    "paystack.frameworks.django",
    'cart',
    # "ddtrace.contrib.django",

]

AUTH_USER_MODEL = "portal.User"
MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django_datadog_logger.middleware.request_id.RequestIdMiddleware",
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # "django_datadog_logger.middleware.error_log.ErrorLoggingMiddleware",
    # "django_datadog_logger.middleware.request_log.RequestLoggingMiddleware",
]

ROOT_URLCONF = 'ecommerce.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            "libraries": {
                "paystack": "paystack.frameworks.django.templatetags.paystack"
            },
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ecommerce.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': os.path.join(BASE_DIR, 'static_server_directory/../db.sqlite3'),
#     }
# }


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'

LOGIN_URL = 'log_in'
LOGIN_REDIRECT_URL = "/"
LOGOUT_REDIRECT_URL = "/"
STATICFILES_DIRS = (os.path.join(BASE_DIR, "static"),)
MEDIA_ROOT = os.path.join(BASE_DIR, "static/media")
MEDIA_URL = "/media/"
STATIC_ROOT = os.path.join(BASE_DIR, "statics")

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql_psycopg2",
        "NAME": env("DB_NAME"),
        "USER": env("DB_USER"),
        "PASSWORD": env("DB_PASSWORD"),
        "HOST": "localhost",
        "PORT": "5432",
    }
}

if not DEBUG:

    API_LOG_ROOT = "logs"
    #
    # LOGGING = {
    #     "version": 1,
    #     "disable_existing_loggers": False,
    #     "formatters": {
    #         "console": {"format": "{levelname} {message}", "style": "{"},
    #         "json": {"()": "django_datadog_logger.formatters.datadog.DataDogJSONFormatter"},
    #     },
    #     "handlers": {
    #         "console": {"level": "INFO", "class": "logging.StreamHandler", "formatter": "console"},
    #         # "application": {
    #         #     "level": "DEBUG",
    #         #     "class": "logging.FileHandler",
    #         #     "filename": os.path.join(API_LOG_ROOT, "api.application.log"),
    #         #     "formatter": "json",
    #         # },
    #         "state": {
    #             "level": "DEBUG",
    #             "class": "logging.FileHandler",
    #             "filename": os.path.join(API_LOG_ROOT, "api.state.log"),
    #             "formatter": "json",
    #         },
    #         "request": {
    #             "level": "DEBUG",
    #             "class": "logging.FileHandler",
    #             "filename": os.path.join(API_LOG_ROOT, "api.request.log"),
    #             "formatter": "json",
    #         },
    #         "session": {
    #             "level": "DEBUG",
    #             "class": "logging.FileHandler",
    #             "filename": os.path.join(API_LOG_ROOT, "api.session.log"),
    #             "formatter": "json",
    #         },
    #         "error": {
    #             "level": "DEBUG",
    #             "class": "logging.FileHandler",
    #             "filename": os.path.join(API_LOG_ROOT, "api.error.log"),
    #             "formatter": "json",
    #         },
    #     },
    #     "loggers": {
    #         "": {"handlers": ["console", "error"], "level": "DEBUG", "propagate": True},
    #         # "ddtrace": {"handlers": ["error"], "level": "ERROR", "propagate": False},
    #         "django.db.backends": {"handlers": ["error"], "level": "ERROR", "propagate": False},
    #         "twilio": {"handlers": ["error"], "level": "ERROR", "propagate": False},
    #         "ecommerce": {"handlers": ["application"], "level": "INFO", "propagate": False},
    #         "ecommerce.throttling": {"handlers": ["application"], "level": "DEBUG", "propagate": False},
    #         "ecommerce.vehicles.viewsets.state": {"handlers": ["state"], "level": "INFO", "propagate": False},
    #         "ecommerce.accounts.session": {"handlers": ["session"], "level": "DEBUG", "propagate": False},
    #         "ecommerce.session": {"handlers": ["session"], "level": "DEBUG", "propagate": False},
    #         "django_auth_ldap": {"level": "DEBUG", "handlers": ["session"], "propagate": False},
    #         # "django_datadog_logger.middleware.error_log": {"handlers": ["error"], "level": "INFO", "propagate": False},
    #         # "django_datadog_logger.middleware.request_log": {"handlers": ["request"], "level": "INFO",
    #         #                                                  "propagate": False},
    #         # "django_datadog_logger.rest_framework": {"handlers": ["application"], "level": "INFO", "propagate": False},
    #     },
    # }
    # DJANGO_DATADOG_LOGGER_EXTRA_INCLUDE = r"^(django_datadog_logger|my_project)(|\..+)$"

# Email settings
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
EMAIL_HOST = 'smtp.zoho.com'
EMAIL_PORT = '465'
EMAIL_HOST_USER = ''
EMAIL_HOST_PASSWORD = ''
EMAIL_USE_TLS = True
DEFAULT_FROM_EMAIL = env("DEFAULT_FROM_EMAIL")
PAYSTACK_PUBLIC_KEY = env("PAYSTACK_PUBLIC_KEY")
PAYSTACK_SECRET_KEY = env("PAYSTACK_SECRET_KEY")
PAYSTACK_SUCCESS_URL = "/products"
PAYSTACK_FAILED_URL = "/cart"
DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'

CLOUDINARY_STORAGE = {
    'CLOUD_NAME': env("CLOUD_NAME"),
    'API_KEY': env("API_KEY"),
    'API_SECRET': env("API_SECRET"),
}

DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'
DEBUG_PROPAGATE_EXCEPTIONS = True
CORS_ALLOW_ALL_ORIGINS = True
# CORS_ALLOW_HEADERS = ['*']
CORS_ALLOW_CREDENTIALS = False
